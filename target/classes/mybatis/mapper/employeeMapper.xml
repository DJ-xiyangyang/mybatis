<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.EmployeeMapper">
    <cache eviction="FIFO" flushInterval="600000000000000" readOnly="false" size="1024"></cache>
    <!--eviction:缓存的回收策略：LRU-最近最少使用的，移除最长时间不被使用的对象
                                FIFO-先进先出，按对象进入缓存的顺序来移除它们
                                SOFT-软引用，移除基于垃圾回收器状态和软引用规则的对象
                                WEAK-弱引用，更积极地移除基于垃圾回收器状态和软引用规则的对象
                                默认的是LRU
    flushInterval:缓存刷新间隔：
                                缓存多长时间清空一次，默认不清空，可以设置毫秒值
         readOnly:是否只读:
                  TRUE:只读，mybatis认为所有从缓存中获取的数据都是读操作，不会修改数据，当
                  mybatis认为当前名称空间的操作全为读取操作时，就会采用直接将缓存数据的引用
                  交给用户的交互方式，这种方式更快，但是不安全
                  FALSE:非只读，mybatis认为读取数据的操作可能为写操作，缓存中的数据可能被修
                  改，这种情况下，mybatis会使用序列化&反序列化技术，将缓存中的数据克隆一份给
                  安全，速度慢。
                  默认为false，如果为true，则意味着mybatis更加信任该名称空间，会承担该名称空
                  间可能会发生修改缓存数据操作的风险与结果。
             size:缓存存放多少元素。
             type:指定自定义缓存的全类名，只要实现cache接口就可以
                                -->
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee" useCache="true">
        select * from employee where id = #{inmbd}
    </select>

    <select id="getEmpByIdAndLastName1" resultType="com.atguigu.mybatis.bean.Employee">
        select * FROM employee where id=#{id} and lastName=#{lastName,jdbcType=NULL}
    </select>
    <select id="getEmpByIdAndLastName2" resultType="com.atguigu.mybatis.bean.Employee">
        select * FROM employee where id=#{param1} and lastName=#{param2}
    </select>

    <select id="getEmpByIdAndLastName3" resultType="com.atguigu.mybatis.bean.Employee">
        select * FROM employee where id=#{id} and lastName=#{lastName}
    </select>

    <select id="getEmpByIdAndLastName4" resultType="com.atguigu.mybatis.bean.Employee">
        select * FROM employee where id=#{id} and lastName=#{lastName}
    </select>

    <select id="getEmpByNameLike" resultType="com.atguigu.mybatis.bean.Employee">
        select * from employee where lastName like concat('%',concat(#{lastName},'%'))
    </select>

    <select id="getEmpMapById" resultType="map">
        select * from employee where id=#{id}
    </select>

    <select id="getEmpMapByNameLike" resultType="com.atguigu.mybatis.bean.Employee">

      select * from employee where lastName LIKE concat('%',concat(#{lastName},'%'))

    </select>



<!--mysql支持自增主键，mybatis利用statement.getGeneratedKeys()方法获取自增主键的值并封装
回作为入参的employee对象-->
    <insert  id="insertEmp" useGeneratedKeys="true" keyProperty="id" >
        insert into employee(lastName,email,gender,d_id) values (#{lastName},#{email},#{gender},#{dId})
    </insert>

    <update id="updateEmp">
        UPDATE employee SET lastName = #{lastName},email=#{email},d_id=#{dId} where id=#{id}
    </update>

    <delete id="delEmpById">
        DELETE FROM employee where id=#{id}
    </delete>

</mapper>